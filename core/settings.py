"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes")

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else []
)

# CSRF settings for production
CSRF_TRUSTED_ORIGINS = []
if os.getenv("CSRF_TRUSTED_ORIGINS"):
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS").split(",")
    # Ensure URLs have proper scheme
    CSRF_TRUSTED_ORIGINS = [
        origin if origin.startswith(('http://', 'https://')) else f'https://{origin}'
        for origin in CSRF_TRUSTED_ORIGINS
    ]

# Additional security settings for production
if not DEBUG:
    # Force HTTPS for CSRF cookies in production
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    # Ensure CSRF cookie is accessible by JavaScript
    CSRF_COOKIE_HTTPONLY = False


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # Third party apps
    "django_extensions",
    "debug_toolbar",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "django_vite",
    "django_summernote",
    "channels",
    "widget_tweaks",
    # Local apps
    "dogfoot",
    "core",
    "accounts",
    "blog",
    "landing",
    "customer",
    "dashboard",
    "email_campaign",
    "email_templates",
    "product",
    "sales",
    "inventory",
    "purchases",
    "shop",
    "customer_portal",
    "chat",
    "factory",
    "factory_portal",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add WhiteNoise here, after SecurityMiddleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # django-allauth middleware
    "allauth.account.middleware.AccountMiddleware",
    # Custom middleware to handle email verification redirects
    "accounts.middleware.EmailVerificationRedirectMiddleware",
    # Debug toolbar middleware
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "shop.context_processors.shop_context",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# ASGI Application
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE", "django.db.backends.sqlite3"),
        "NAME": BASE_DIR / os.getenv("DATABASE_NAME", "db.sqlite3"),
        "OPTIONS": {
            "timeout": 20,  # Increase timeout to 20 seconds
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "assets",
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise configuration
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Allow WhiteNoise to serve media files in development
WHITENOISE_AUTOREFRESH = True
WHITENOISE_USE_FINDERS = True

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Django Vite Settings
DJANGO_VITE = {
    "default": {
        "dev_mode": os.getenv("DJANGO_VITE_DEV_MODE", "False").lower()
        in ("true", "1", "yes"),
        # "dev_server_port": 5173,
        # "static_url_prefix": "",
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "accounts.User"

# django-allauth settings
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = int(os.getenv("SITE_ID", "1"))

# Email settings
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587")) if os.getenv("EMAIL_PORT") else 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "yes")

# django-allauth configuration
# New format for authentication method
ACCOUNT_LOGIN_METHODS = {
    "email"
}  # Use email for login (replaces ACCOUNT_AUTHENTICATION_METHOD)

# Email verification settings
ACCOUNT_EMAIL_VERIFICATION = "none"  # Disabled email verification

# New format for signup fields
ACCOUNT_SIGNUP_FIELDS = [
    "email*",
    "username*",
    "password1*",
    "password2*",
]  # Replaces ACCOUNT_EMAIL_REQUIRED and ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE

# Other settings
ACCOUNT_USERNAME_MIN_LENGTH = 4
ACCOUNT_UNIQUE_EMAIL = True  # Ensure email uniqueness
LOGIN_REDIRECT_URL = "/"  # Redirect to shop (homepage) after login
LOGOUT_REDIRECT_URL = "/"  # Django's built-in logout redirect to shop (homepage)
ACCOUNT_LOGOUT_REDIRECT_URL = "/"  # django-allauth logout redirect to shop (homepage)
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False  # Don't auto-login on email confirm
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False  # Don't auto-login on password reset
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_REDIRECT_URL
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = LOGIN_REDIRECT_URL
ACCOUNT_ADAPTER = "accounts.adapter.NoEmailVerificationAdapter"  # Custom adapter

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
        "file": {
            "class": "logging.FileHandler",
            "filename": "debug.log",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        # Add your app-specific loggers here
        "sales": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "purchases": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "product": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Django Summernote Configuration
SUMMERNOTE_CONFIG = {
    # Editor size
    "width": "100%",
    "height": "400",
    # Toolbar customization
    "toolbar": [
        ["style", ["style"]],
        ["font", ["bold", "italic", "underline", "clear"]],
        ["fontname", ["fontname"]],
        ["fontsize", ["fontsize"]],
        ["color", ["color"]],
        ["para", ["ul", "ol", "paragraph"]],
        ["table", ["table"]],
        ["insert", ["link", "picture", "video"]],
        ["view", ["fullscreen", "codeview", "help"]],
    ],
    # Codemirror settings
    "codemirror": {
        "mode": "htmlmixed",
        "lineNumbers": True,
        "theme": "monokai",
    },
    # Upload settings
    "attachment_require_authentication": True,
    # Other settings
    "summernote": {
        "airMode": False,
        "lang": "en-US",
    },
}

# Django Debug Toolbar configuration
INTERNAL_IPS = [
    "127.0.0.1",
    "localhost",
]


# Custom callback to show/hide debug toolbar
def show_toolbar(request):
    # Don't show toolbar on customer-facing pages
    if request.path.startswith("/account/") or request.path.startswith("/shop/"):
        return False
    return DEBUG


# Show SQL queries in debug toolbar
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
    "SHOW_COLLAPSED": True,
    "SHOW_TEMPLATE_CONTEXT": True,
    "ENABLE_STACKTRACES": True,
}

# Django Extensions configuration
SHELL_PLUS_PRINT_SQL = True  # Print SQL queries in shell_plus

# Django Channels configuration
# Use Redis in production, in-memory for development
if DEBUG:
    CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}
else:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("127.0.0.1", 6379)],
            },
        },
    }
